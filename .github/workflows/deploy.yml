name: Build & Deploy to ECS (Fargate)

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write    # for OIDC
  contents: read

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: brightdata-proxy
  ECS_CLUSTER: brightdata-cluster
  ECS_SERVICE: brightdata-proxy-svc
  CONTAINER_NAME: brightdata-proxy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug AWS identity/region
        run: |
          aws sts get-caller-identity
          aws configure get region
          aws ecr describe-repositories --region $AWS_REGION || true

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --query 'repositories[0].repositoryUri' --output text)
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-taskdef.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
